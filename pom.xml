<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-parent</artifactId>
	<version>2.3.0.RELEASE</version>
  </parent>
	
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.slef.learnjava</groupId>
  <artifactId>springboot-study</artifactId>
  <version>1.0-SNAPSHOT</version>

  <name>springboot-study</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <java.version>1.8</java.version>
    <pebble.version>3.1.2</pebble.version>
    <openapi.version>1.4.0</openapi.version>
  </properties>

  <dependencies>
  	<dependency>
  		<groupId>org.springframework.boot</groupId>
  		<artifactId>spring-boot-starter-web</artifactId>
  	</dependency>
  	<dependency>
  		<groupId>org.springframework.boot</groupId>
  		<artifactId>spring-boot-starter-aop</artifactId>
  	</dependency>
  	<dependency>
  		<groupId>org.springframework.boot</groupId>
  		<artifactId>spring-boot-starter-jdbc</artifactId>
  	</dependency>
  	<!-- 集成Pebble View -->
  	<dependency>
  		<groupId>io.pebbletemplates</groupId>
  		<artifactId>pebble-spring-boot-starter</artifactId>
  		<version>${pebble.version}</version>
  	</dependency>
  	<!-- 集成JDBC驱动 -->
  	<dependency>
  		<groupId>org.hsqldb</groupId>
  		<artifactId>hsqldb</artifactId>
  	</dependency>
  	<!-- Spring Boot提供了一个开发阶段非常有用的spring-boot-devtools，能自动检测classpath路径上文件修改并自动重启。 -->
  	<dependency>
	    <groupId>org.springframework.boot</groupId>
	    <artifactId>spring-boot-devtools</artifactId>
	</dependency>
	<!-- 在生产环境中，需要对应用程序的状态进行监控。前面我们已经介绍了使用JMX对Java应用程序包括JVM进行监控，使用JMX需要把一些监控信息以MBean的形式暴露给JMX Server，
	而Spring Boot已经内置了一个监控功能，它叫Actuator。 -->
	<dependency>
	    <groupId>org.springframework.boot</groupId>
	    <artifactId>spring-boot-starter-actuator</artifactId>
	</dependency>
	<dependency>
		<groupId>org.springdoc</groupId>
		<artifactId>springdoc-openapi-ui</artifactId>
		<version>${openapi.version}</version>
	</dependency>
	<dependency><!-- Lettuce：一个基于Netty的高性能Redis客户端；RedisTemplate：一个类似于JdbcTemplate的接口，用于简化Redis的操作。 -->
		<groupId>io.lettuce</groupId>
		<artifactId>lettuce-core</artifactId>
	</dependency>
	<dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>commons-pool2</artifactId>
	</dependency>
	<dependency><!-- 集成Artemis -->
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-artemis</artifactId>
	</dependency>
	<dependency><!-- 集成amqp -->
	    <groupId>org.springframework.boot</groupId>
	    <artifactId>spring-boot-starter-amqp</artifactId>
	</dependency>
	<dependency><!-- 集成Kafka -->
	    <groupId>org.springframework.kafka</groupId>
	    <artifactId>spring-kafka</artifactId>
	</dependency>
  </dependencies>
  <build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <!-- 在打包的时候，因为打包后的Spring Boot应用不会被修改，因此，默认情况下，spring-boot-devtools这个依赖不会被打包进去。
            	但是要注意，使用早期的Spring Boot版本时，需要配置一下才能排除spring-boot-devtools这个依赖： -->
            <configuration>
		        <excludeDevtools>true</excludeDevtools>
		    </configuration>
        </plugin>
    </plugins>
  </build>
</project>