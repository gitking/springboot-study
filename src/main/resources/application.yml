server:
    port: ${APP_PORT:8080}

spring:
    application:
        name: ${APP_NAME:unnamed}
    datasource-master:
        url: jdbc:hsqldb:file:testdb
        username: sa
        password:
        driver-class-name: org.hsqldb.jdbc.JDBCDriver
        # HikariCP配置
        hikari:
            auto-commit: false
            connection-timeout: 3000
            validation-timeout: 3000
            max-lifetime: 60000
            maximum-pool-size: 20
            minimum-idle: 1
    datasource-slave:
        url: jdbc:hsqldb:file:testdb
        #可替换为只有SELECT权限的只读用户
        username: sa
        password: 
        driver-class-nmae: org.hsqldb.jdbc.JDBCDriver
        hikari: 
            auto-commit: false
            connection-timeout: 3000
            validation-timeout: 3000
            maximum-pool-size: 5
            minimum-idle: 1
    redis:
        host: ${REDIS_HOST:localhost}
        port: ${REDIS_PORT:6379}
        password: ${REDIS_PASSWORD:}
        sll: ${REDIS_SSL:false}
        database: ${REDIS_DATABASE:0}
    artemis:
        #指定连接外部Artemis服务器,而不是启动嵌入式服务:
        mode: native
        #服务器地址和端口号
        host: 127.0.0.1
        port: 61616
        #连接用户名和口令由创建Artemis服务器时指定:
        user: admin
        password: password

pebble:
    #默认为".pebble",改为""
    suffix: 
    #开发阶段禁用模板缓存
    cache: false
#Actuator默认把所有访问点暴露给JMX，但处于安全原因，只有health和info会暴露给Web。Actuator提供的所有访问点均在官方文档列出，要暴露更多的访问点给Web，需要在application.yml中加上配置：
#要特别注意暴露的URL的安全性，例如，/actuator/env可以获取当前机器的所有环境变量，不可暴露给公网。
management:
    endpoints:
        web:
          exposure:
            include: info, health, beans, env, metrics
storage:
    type: ${STORAGE_TYPE:local}
    #可以首先定义一个Java Bean，持有该组配置：
    local:
        #文件存储根目录
        root-dir: ${STORAGE_LOCAL_ROOT:/var/storage}
        #最大文件大小,默认为100K：
        max-size: ${STORAGE_LOCAL_MAX_SIZE:102400}
        #是否允许空文件
        allow-empty: false
        #允许的文件类型:
        allow-types: jpg, png, gif
#注意到分隔符---，最前面的配置是默认配置，不需要指定Profile，后面的每段配置都必须以spring.profiles: xxx开头，表示一个Profile。
#上述配置默认使用8080端口，但是在test环境下，使用8000端口，在production环境下，使用80端口，并且启用Pebble的缓存。
#如果我们不指定任何Profile，直接启动应用程序，那么Profile实际上就是default，可以从Spring Boot启动日志看出：
---

spring:
    profiles: test

server:
    port: ${APP_PORT:8080}

---

spring:
    profiles: production

server:
    port: 80

pebble:
    cache: true